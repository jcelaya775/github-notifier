// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../time/models.js";

export class Notification {
    /**
     * Creates a new Notification instance.
     * @param {Partial<Notification>} [$$source = {}] - The source object to create the Notification.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("unread" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["unread"] = false;
        }
        if (!("reason" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["reason"] = "";
        }
        if (!("updated_at" in $$source)) {
            /**
             * @member
             * @type {time$0.Time}
             */
            this["updated_at"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {time$0.Time | null | undefined}
             */
            this["last_read_at"] = undefined;
        }
        if (!("subject" in $$source)) {
            /**
             * @member
             * @type {Subject}
             */
            this["subject"] = (new Subject());
        }
        if (!("repository" in $$source)) {
            /**
             * @member
             * @type {Repository}
             */
            this["repository"] = (new Repository());
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("subscription_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["subscription_url"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Notification instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Notification}
     */
    static createFrom($$source = {}) {
        const $$createField5_0 = $$createType0;
        const $$createField6_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("subject" in $$parsedSource) {
            $$parsedSource["subject"] = $$createField5_0($$parsedSource["subject"]);
        }
        if ("repository" in $$parsedSource) {
            $$parsedSource["repository"] = $$createField6_0($$parsedSource["repository"]);
        }
        return new Notification(/** @type {Partial<Notification>} */($$parsedSource));
    }
}

export class Owner {
    /**
     * Creates a new Owner instance.
     * @param {Partial<Owner>} [$$source = {}] - The source object to create the Owner.
     */
    constructor($$source = {}) {
        if (!("login" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["login"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("avatar_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["avatar_url"] = "";
        }
        if (!("html_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["html_url"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("site_admin" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["site_admin"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Owner instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Owner}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Owner(/** @type {Partial<Owner>} */($$parsedSource));
    }
}

export class Repository {
    /**
     * Creates a new Repository instance.
     * @param {Partial<Repository>} [$$source = {}] - The source object to create the Repository.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("node_id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["node_id"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("full_name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["full_name"] = "";
        }
        if (!("private" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["private"] = false;
        }
        if (!("owner" in $$source)) {
            /**
             * @member
             * @type {Owner}
             */
            this["owner"] = (new Owner());
        }
        if (!("html_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["html_url"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Repository instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Repository}
     */
    static createFrom($$source = {}) {
        const $$createField5_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("owner" in $$parsedSource) {
            $$parsedSource["owner"] = $$createField5_0($$parsedSource["owner"]);
        }
        return new Repository(/** @type {Partial<Repository>} */($$parsedSource));
    }
}

export class Subject {
    /**
     * Creates a new Subject instance.
     * @param {Partial<Subject>} [$$source = {}] - The source object to create the Subject.
     */
    constructor($$source = {}) {
        if (!("title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("latest_comment_url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["latest_comment_url"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["type"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Subject instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Subject}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Subject(/** @type {Partial<Subject>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Subject.createFrom;
const $$createType1 = Repository.createFrom;
const $$createType2 = Owner.createFrom;
